@page "/ManagementDashboard"
@using FinalYearProject.Services
@using FinalYearProject.Models
@using FinalYearProject.Enums
@inject UserService UserService
@inject ControlsService ControlsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@if (_isLoading)
{
    <LoadingScreen/>
}
else
{
    <MudContainer>
        <MudCard>
            <MudCardContent>
                <MudTabs Color="Color.Primary" Rounded="true" Centered="true">
                    <MudTabPanel Text="Control Evaluations for Review">
                        <ReviewRequiredComponent InReviewControlEvaluations="@_inReviewControlEvaluations"/>
                    </MudTabPanel>
                    <MudTabPanel Text="Registered Users">
                        <RegisteredUsers AllUsers="@_allUsers"/>
                    </MudTabPanel>
                </MudTabs>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}

@code{

    private User _user = new();
    private bool _isLoading;
    private List<User> _allUsers = new();
    private List<ControlEvaluations> _inReviewControlEvaluations = new();
    
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _allUsers = await UserService.FetchAllUsersWithControlEval();
            _user = await UserService.FetchUserWithControlEval(user.Identity.Name);
            _inReviewControlEvaluations = await ControlsService.FetchAllInReviewControlEvals();
            _isLoading = false;
        }
    }

}